(()=>{"use strict";var e;!function(e){e[e.NumericLiteral=0]="NumericLiteral",e[e.Program=1]="Program",e[e.BinaryExpr=2]="BinaryExpr",e[e.Identifier=3]="Identifier"}(e||(e={}));const a={kind:e.Program,code:[{kind:e.BinaryExpr,left:{kind:e.NumericLiteral,value:10},right:{kind:e.NumericLiteral,value:5},operator:"+"}]},r=new class{constructor(e){this.parent=e,this.variables=new Map}defineVar(e,a){if(this.variables.has(e))throw"Variable already exists";return this.variables.set(e,a),a}findVar(e){if(this.variables.has(e))return this.variables.get(e);if(this.parent)return this.parent.findVar(e);throw"Variable does not exist"}setVar(e,a){var r;if(!this.variables.has(e))throw"Variable does not exist";if(!0===(null===(r=this.variables.get(e))||void 0===r?void 0:r.constant))throw"This variable is constant";return this.variables.set(e,a),a}};r.defineVar("null",{type:"null",value:"null"}),r.defineVar("true",{type:"boolean",value:!0}),r.defineVar("false",{type:"boolean",value:!1}),console.log(function a(r){switch(r.kind){case e.NumericLiteral:return{type:"number",value:r.value};case e.Program:throw"Program cannot be a node inside the ast and should have been handled if it was at the top";case e.BinaryExpr:return function(e){let r=a(e.left),t=a(e.right);if("number"===r.type&&"number"===t.type)return function(e,a,r){switch(r){case"+":return{type:"number",value:e.value+a.value};case"-":return{type:"number",value:e.value-a.value};case"*":return{type:"number",value:e.value*a.value};case"/":return{type:"number",value:e.value/a.value};case"%":return{type:"number",value:e.value%a.value};case"^":return{type:"number",value:e.value^a.value};default:throw"Invalid Operator"}}(r,t,e.operator);throw"Cannot evaluate Binary Expression"}(r);default:throw"Invalid Statement"}}(a.code[0]))})();