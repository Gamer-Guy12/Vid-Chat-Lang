(()=>{"use strict";var e;!function(e){e[e.NumericLiteral=0]="NumericLiteral",e[e.Program=1]="Program",e[e.BinaryExpr=2]="BinaryExpr"}(e||(e={}));const r={kind:e.Program,code:[{kind:e.BinaryExpr,left:{kind:e.NumericLiteral,value:10},right:{kind:e.NumericLiteral,value:5},operator:"+"}]};console.log(function r(a){switch(a.kind){case e.NumericLiteral:return{type:"number",value:a.value};case e.Program:throw"Program cannot be a node inside the ast and should have been handled if it was at the top";case e.BinaryExpr:return function(e){let a=r(e.left),t=r(e.right);if("number"===a.type&&"number"===t.type)return function(e,r,a){switch(a){case"+":return{type:"number",value:e.value+r.value};case"-":return{type:"number",value:e.value-r.value};case"*":return{type:"number",value:e.value*r.value};case"/":return{type:"number",value:e.value/r.value};case"%":return{type:"number",value:e.value%r.value};case"^":return{type:"number",value:e.value^r.value};default:throw"Invalid Operator"}}(a,t,e.operator);throw"Cannot evaluate Binary Expression"}(a);default:throw"Invalid Statement"}}(r.code[0]))})();